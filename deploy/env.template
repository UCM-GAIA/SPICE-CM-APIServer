#
# Configuración de los contenedores
#

# Plantilla base de fichero .env para configurar los contenedores
# que se lanzarán.
#
# Dependiendo de qué quieras lanzar, tendrás que incorporar unos
# ficheros .yml u otros. Además, hay un montón de variables de configuración.
# Algunas son imprescindibles, pero otras dependerá de si incorporas
# o no algunos .yml.
#
# Es preferible que definas todas las variables (que se necesiten) incluso
# aunque las quieras dejar vacías. Si no, la ejecución de Docker Compose
# generará avisos de variable no definida en cada invocación.
#
# Lo más cómodo es que copies el fichero y lo renombres a .env para que
# se utilice automáticamente. También puedes darle otro nombre y especificarlo
# con:
#
# docker-compose --env-file mifichero.env <resto de los comandos>


######################################
#
#     Variables de configuración
#
######################################



#######
#
# Configuración de la base de datos
#

# Configuración de la *inicialización* de la base de datos.
# Solo es necesario la primera vez que se lanzan los contenedores.
MONGO_INITDB_ROOT_USERNAME=admin
MONGO_INITDB_ROOT_PASSWORD=adminadmin

# Configuración de la base de datos. Indica el nombre de la
# base de datos de Mongo, el usuario y la contraseña.
#
# MONGODB_DATABASE=... # Por defecto se asume "spiceComMod". No es necesario tocarla.
# MONGODB_USER=...     # Por defecto "spice". No es necesario tocarla.
MONGODB_PASSWORD=lapicero

# Salvo que se diga lo contrario, la base de datos se guarda directamente
# en el contenedor de la base de datos, lo que no es muy útil como
# sistema de persistencia.
# 
# Se ofrecen dos opciones:
#
# - Usar un volumen (de Docker). El nombre será fijo (db). Para usarlo
#   hay que incluir db.volume.yml.
# - Usar un directorio en el anfitrión. La ruta del directorio *completo*
#   (no puede ser una ruta absoluta) se debe proporcionar en la variable
#   de entorno $HOST_DB_PATH, y se debe incluir db.directory.yml.
#   El directorio *debe poder ser escrito* por UID/GUID (ver arriba).
#
# HOST_DB_PATH=/

#######
#
# Configuración de la red
#

# Por defecto *no* se expone el puerto de Mongo en el anfitrión. En
# desplegados de producción no es necesario publicarlo y se evita una
# puerta de acceso.
#
# Durante el desarrollo, puedes querer publicarlo para acceder a la
# base de datos con herramientas gráficas externas. Si quieres hacerlo
# *incluye db.exposeport.yml* y, opcionalmente, define la siguiente
# variable (el puerto por defecto si no lo haces es el 27017, el de mongo)
#MONGODB_HOST_PORT=27017


# Puerto interno (del contenedor) en el que escuchará el servidor
# web en node. Por defecto es el 8080. Es improbable que lo
# quieras cambiar.
#APP_CONTAINER_PORT=8080


# Por defecto *no* se publica el servidor hacia el exterior. Dependiendo
# del uso, querrás publicar un puerto en el anfitrión y engancharlo con el
# puerto de la aplicación web en el contenedor, o bien dejarlo "privado" y
# hacer que el acceso se realice a través de algún otro contenedor conectado
# a la red de Docker (típicamente Traefik). Según lo que quieras será importante
# una u otra configuración de las que aparecen a continuación.

# Puerto público (del anfitrión) en el que escucha la aplicación.
# *Solo se usa si se incluye app.exposeport.yml*
# Si no, la única forma de acceder al servicio será a través de la
# red de Docker.
#APP_HOST_PORT=8080


#
# Traefik (proxy inverso en máquinas de desplegado)
#

# Red de Docker a la que se conectará *únicamente* el servidor y
# que será la que indicará a Traefik para que se conecte a él. El
# contenedor de Traefik debería estar conectado aquí, por lo que
# deberá haber sido creada manualmente con antelación (con el comando
# docker network create).
#
# Esta variable solo se usa si se incluye traefik.yml
#TRAEFIK_NETWORK=traefikNet

# Nombre público del servidor con el que llegan los usuarios externos
# a él para conectarse.
# 
# *Solo se usa si se incluye traefik.yml* para añadir las etiquetas
# de Traefik para pedirle que redirija el tráfico que le llegue a ese
# nombre a nuestro contenedor.
# SERVER_PUBLIC_NAME=spice.fdi.ucm.es

# Identificador del servicio en Traefik. Sirve para asociar la regla de
# redirección del proxy inverso a un identificador. ¡¡DEBE SER ÚNICO!!
# Si dos servicios tienen el mismo identificador ¡no funcionará ninguno!
# Una forma de evitar colisiones es poner el nombre DNS público.
# *Solo se usa si se incluye traefik.yml*
#TRAEFIK_SERVICE_ID=spice-commod

######################################
#
# Configuración de Compose.
#
######################################


# Nombre del "proyecto". Se usa como prefijo de todos los contenedores
# que se construyan en lugar de utilizar el nombre del directorio.
COMPOSE_PROJECT_NAME=spice_com_mod


#######
#
# Ficheros a mezclar. ¡El orden podría ser importante!
#

# Dejo varios ejemplos.

# Solo base.yml : base de datos y servidor.
# No es muy útil porque no abre el acceso al servidor salvo que uses
# el nombre de la red que "decida crear" Docker Compose.
#COMPOSE_FILE=base.yml

# Servidor accesible en un puerto del anfitrión ($APP_HOST_PORT)
#COMPOSE_FILE=base.yml:app.exposeport.yml

# Versión común en desarrollo: servidor accesible en un puerto del
# anfitrión ($APP_HOST_PORT) y base de datos también accesible
# en el anfitrión ($MONGODB_HOST_PORT)
#COMPOSE_FILE=base.yml:app.exposeport.yml:db.exposeport.yml

# Servidor accesible con traefik con el nombre público $SERVER_PUBLIC_NAME
# a través de la red Docker (previamente creada) $TRAEFIK_NETWORK.
#COMPOSE_FILE=base.yml:traefik.yml
